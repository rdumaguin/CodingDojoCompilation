Using the shell...
Create 5 books with the following names: C sharp, Java, Python, PHP, Ruby
Create 5 different authors: Mike, Speros, John, Jadee, Jay
>>> Author.objects.create(first_name="Mike",email="mike.python.com")
Add a new field in the authors table called 'notes'.  Make this a TextField.  Successfully create and run the migration files.
Change the name of the 5th book to C#
>>> Book.objects.get(id=5).name
  u'C#'
Change the first_name of the 5th author to Ketul
>>> Author.objects.get(id=5).first_name
  u'Ketul'
Assign the first author to the first 2 books
Assign the second author to the first 3 books
Assign the third author to the first 4 books
Assign the fourth author to the first 5 books (or in other words, all the books)
>>> Book.objects.get(id=1).authors.add(Author.objects.get(id=4))
>>> Book.objects.get(id=2).authors.add(Author.objects.get(id=4))
>>> Book.objects.get(id=3).authors.add(Author.objects.get(id=4))
>>> Book.objects.get(id=4).authors.add(Author.objects.get(id=4))
>>> Book.objects.get(id=5).authors.add(Author.objects.get(id=4))
For the 3rd book, retrieve all the authors
>>> Book.objects.get(id=3).authors.all()
  <QuerySet [<Author: Author object>, <Author: Author object>, <Author: Author object>]>
>>> Book.objects.get(id=3).authors.values()
  <QuerySet [{'first_name': u'Speros', 'last_name': u'', 'created_at': datetime.datetime(2017, 11, 8, 7, 24, 26, 956000, tzinfo=<UTC>), 'updated_at': datetime.datetime(2017, 11, 8, 7, 24, 26, 956000, tzinfo=<UTC>), 'email': u'speros@python.com', 'notes': u'', u'id': 2}, {'first_name': u'John', 'last_name': u'', 'created_at': datetime.datetime(2017, 11, 8, 7, 24, 43, 430000, tzinfo=<UTC>), 'updated_at': datetime.datetime(2017, 11, 8, 7, 24, 43, 430000, tzinfo=<UTC>), 'email': u'john@python.com', 'notes': u'', u'id': 3}, {'first_name': u'Jadee', 'last_name': u'', 'created_at': datetime.datetime(2017, 11, 8, 7, 24, 54, 963000, tzinfo=<UTC>), 'updated_at': datetime.datetime(2017, 11, 8, 7, 24, 54, 963000, tzinfo=<UTC>), 'email': u'jadee@python.com', 'notes': u'', u'id': 4}]>
For the 3rd book, remove the first author
>>> Book.objects.get(id=3).authors.remove(Author.objects.get(id=2))
>>> Book.objects.get(id=3).authors.values()
  <QuerySet [{'first_name': u'John', 'last_name': u'', 'created_at': datetime.datetime(2017, 11, 9, 5, 22, 57, 300000, tzinfo=<UTC>), 'updated_at': datetime.datetime(2017, 11, 9, 5, 22, 57, 300000, tzinfo=<UTC>), 'email': u'john.python.com', 'notes': u'', u'id': 3}, {'first_name': u'Jadee', 'last_name': u'', 'created_at': datetime.datetime(2017, 11, 9, 5, 24, 36, 427000, tzinfo=<UTC>), 'updated_at': datetime.datetime(2017, 11, 9, 5, 24, 36, 427000, tzinfo=<UTC>), 'email': u'jadee.python.com', 'notes': u'', u'id': 4}]>
For the 2nd book, add the 5th author as one of the authors
>>> Book.objects.get(id=2).authors.add(Author.objects.get(id=5))
>>> Book.objects.get(id=2).authors.all()
  <QuerySet [<Author: Author object>, <Author: Author object>, <Author: Author object>, <Author: Author object>, <Author: Author object>]>
Find all the books that the 3rd author is part of
>>> Author.objects.get(id=3).books.all()
  <QuerySet [<Book: Book object>, <Book: Book object>, <Book: Book object>, <Book: Book object>]>
>>> Author.objects.get(id=3).books.values()
  <QuerySet [{'updated_at': datetime.datetime(2017, 11, 8, 7, 6, 50, 82000, tzinfo=<UTC>), 'created_at': datetime.datetime(2017, 11, 8, 7, 6, 50, 82000, tzinfo=<UTC>), 'desc': u'C sharp description', u'id': 1, 'name': u'C sharp'}, {'updated_at': datetime.datetime(2017, 11, 8, 7, 10, 8, 114000, tzinfo=<UTC>), 'created_at': datetime.datetime(2017, 11, 8, 7, 10, 8, 114000, tzinfo=<UTC>), 'desc': u'Java description', u'id': 2, 'name': u'Java'}, {'updated_at': datetime.datetime(2017, 11, 8, 7, 11, 2, 137000, tzinfo=<UTC>), 'created_at': datetime.datetime(2017, 11, 8, 7, 11, 2, 137000, tzinfo=<UTC>), 'desc': u'Python description', u'id': 3, 'name': u'Python'}, {'updated_at': datetime.datetime(2017, 11, 8, 7, 11, 18, 337000, tzinfo=<UTC>), 'created_at': datetime.datetime(2017, 11, 8, 7, 11, 18, 337000, tzinfo=<UTC>), 'desc': u'PHP description', u'id': 4, 'name': u'PHP'}]>
Find all the books that the 2nd author is part of
>>> Author.objects.get(id=2).books.all()
  <QuerySet [<Book: Book object>, <Book: Book object>, <Book: Book object>]>
>>> Author.objects.get(id=2).books.values()
  <QuerySet [{'updated_at': datetime.datetime(2017, 11, 8, 7, 6, 50, 82000, tzinfo=<UTC>), 'created_at': datetime.datetime(2017, 11, 8, 7, 6, 50, 82000, tzinfo=<UTC>), 'desc': u'C sharp description', u'id': 1, 'name': u'C sharp'}, {'updated_at': datetime.datetime(2017, 11, 8, 7, 10, 8, 114000, tzinfo=<UTC>), 'created_at': datetime.datetime(2017, 11, 8, 7, 10, 8, 114000, tzinfo=<UTC>), 'desc': u'Java description', u'id': 2, 'name': u'Java'}, {'updated_at': datetime.datetime(2017, 11, 8, 7, 11, 2, 137000, tzinfo=<UTC>), 'created_at': datetime.datetime(2017, 11, 8, 7, 11, 2, 137000, tzinfo=<UTC>), 'desc': u'Python description', u'id': 3, 'name': u'Python'}]>
